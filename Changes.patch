Index: hello-spring/hello-spring/src/test/java/hello/hellospring/service/MemberServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hello-spring/hello-spring/src/test/java/hello/hellospring/service/MemberServiceTest.java b/hello-spring/hello-spring/src/test/java/hello/hellospring/service/MemberServiceTest.java
new file mode 100644
--- /dev/null	(date 1680446483661)
+++ b/hello-spring/hello-spring/src/test/java/hello/hellospring/service/MemberServiceTest.java	(date 1680446483661)
@@ -0,0 +1,88 @@
+package hello.hellospring.service;
+
+import hello.hellospring.domain.Member;
+
+import hello.hellospring.repository.MemoryMemberRepository;
+import org.assertj.core.api.Assertions;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class MemberServiceTest {
+
+//    MemberService memberService = new MemberService(memberRepository);
+    MemberService memberService;
+    MemoryMemberRepository memberRepository = new MemoryMemberRepository();
+    //테스트에서 new로 새 인스턴스를 생성했으므로 다른 레포지토리에 작업을 하는꼴.. static 메서드만 사용해서 문제 없긴하지만
+    // 이문제 해결 위해 memberService 에서 생성자 파라미터로 memberRepository를 받아
+
+    // 매번 테스트 하기전에 아래 작업이 이루어져야함
+    @BeforeEach
+    public void beforeEach() {
+        memberRepository = new MemoryMemberRepository();
+        memberService = new MemberService(memberRepository);
+        // 멤버서비스 입장에서 보면 내부에서 new하지 않고 외부에서 레포지토리를 넣어줌
+        // 이런걸 디펜던시 리젝션 DI라고 함!!!!!!!!!!!!!!!!
+    }
+
+    @AfterEach
+    public void afterEach() {
+        memberRepository.clearStore();
+    }
+
+    @Test
+    void 회원가입() {// 한글로 메서드명 지어도 무방 test코드는 빌드할때 포함이 안되니까..
+        //아래 3단계 패턴으로 test 코드 짜면 좋은듯
+        // given 뭔가 주어졌을때
+        Member member = new Member();
+        member.setName("hello");
+
+        //when 이걸 실행했을때
+        Long saveId = memberService.join(member);
+
+        //then 결과가 이게 나와야해!
+        Member findMember = memberService.findOne(saveId).get(); // ctrl+alt+v 메서드의 반환값을 변수에 넣을 수 있게 타압 변수명 = 세팅해주는 단축키
+        Assertions.assertThat(member.getName()).isEqualTo(findMember.getName());
+
+    }
+
+    // Test는 예외 확인이 더 중요하다!!
+    @Test
+    public void 중복_회원_예외() {
+        //given
+        Member member1 = new Member();
+        member1.setName("spring");
+
+        Member member2 = new Member();
+        member2.setName("spring");
+
+        //when
+        memberService.join(member1);
+        IllegalStateException e = assertThrows(IllegalStateException.class, () -> memberService.join(member2));
+        Assertions.assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다."); // message까지 검증하고싶을때 이렇게.
+        // 2번째 파라미터로 넣은 람다함수를 실행하면 1번째 파라미터에 넣은 예외가 터져야함. 그래야 성공.
+
+// try catch보다 위에 방식 사용??
+//        try {
+//            memberService.join(member2);//member1과 name이 같으므로 서비스에서 로직짠대로 에러가 나야함.
+//            fail(); // 윗줄에서 에러가 나는게 정상인데 안나서 여기로 왔다면 fail
+//        } catch (IllegalStateException e) {
+//            Assertions.assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");
+//        }
+
+
+
+        //then
+
+    }
+
+    @Test
+    void findMembers() {
+    }
+
+    @Test
+    void findOne() {
+    }
+}
\ No newline at end of file
